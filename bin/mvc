#!/usr/bin/env php
<?php
// Setup the autoloader.
// define('ROOT', realpath(dirname(__FILE__) . '/../'));
define('ROOT', realpath(dirname(__FILE__) . '/../../../../'));

require ROOT . '/vendor/autoload.php';

// Create the instance of the output and parser.
$func = isset($argv[1]) ? $argv[1] : 'help';

// List of supported arguments to functions.
$map = [
    'help' => [
        'description' => 'This menu',
        'callback'  => 'mvc_help',
        'required'  => [],
        'supported' => [],
    ],
    'setup' => [
        'description' => 'Setup an standard mvc-lite application',
        'callback'  => 'mvc_setup',
        'required' => ['target'],
        'supported' => [
            'target' => 'Where to create the mvc application',
        ],
    ],
    'controller:create' => [
        'description' => 'Create a controller',
        'callback'  => 'mvc_controller_create',
        'required' => ['target', 'name'],
        'supported' => [
            'name'        => 'The name of the controller',
            'target'      => 'The root of the application',
            'description' => 'The description of the controller',
        ],
    ],
    'model:create' => [
        'description' => 'Create a model',
        'callback'  => 'mvc_model_create',
        'required' => ['target', 'name'],
        'supported' => [
            'name'        => 'The name of the model',
            'target'      => 'The root of the application',
            'description' => 'The description of the model',
        ]
    ],
    'action:create' => [
        'description' => 'Create an action (creates a corresponding view script)',
        'callback'  => 'mvc_action_create',
        'required' => ['target', 'name', 'controller'],
        'supported' => [
            'name'        => 'The name of the action',
            'controller'  => 'The name of the controller',
            'target'      => 'The root of the application',
            'description' => 'The description of the action',
        ]
    ],
    'resource:create' => [
        'description' => 'Create a resource (Controller, model, and default view)',
        'callback'  => 'mvc_resource_create',
        'required' => ['target', 'name'],
        'supported' => [
            'name'        => 'The name of the resource',
            'target'      => 'The root of the application',
            'description' => 'The description of the resource',
        ]
    ],
];

// Dispatch the request.
if (array_key_exists($func, $map)) {
    // Try to run the function, but be prepared for bad things.
    try {
        $output = new PhpCli\Output;
        $parser = new PhpCli\Parser($argv, $map[$func]['supported']);
        mvc_check_requirements($parser, $output, $map[$func]['required']);
        mvc_dispatch_request($parser, $output, $map[$func]['callback']);
    } catch (PhpCli\Exception $exception) {
    // Catch any namespaced exceptions, and send them to the output device.
        $output->newline()
            ->write(' Caught Exception', ['color' => 'red'])
            ->newline()
            ->write(' - ' . $exception->getMessage())
            ->newline()
            ->newline();
    }
}

/**
 * Shows a help menu to the user.
 *
 * @param \PhpCli\Parser $parser The parser instance.
 * @param \PhpCli\Outout $output The output instance.
 */
function mvc_help($parser, $output)
{
    global $map;
    foreach ($map as $arg => $options) {
        $output->newline()
            ->write($arg, ['color' => 'red', 'bold' => true])
            ->write(' - ')
            ->write($options['description'])
            ->newline();
        if (count($options['required'])) {
            $output->write('    Required arguments: ', ['color' => 'green'])
            ->write('--'. implode('=value, --', $options['required']) . '=value')
            ->newline();
        }
    }

    $output->newline()
        ->write('Example Usage: ', ['bold' => true])
        ->newline()
        ->write('  ./vendor/bin/mvc --resource:create --name=users --target=/path/to/app')
        ->newline()
        ->newline();
}

/**
 * Checks to make sure that the arguments given, match required arguments.
 *
 * @param \PhpCli\Parser $parser The parser instance.
 * @param \PhpCli\Outout $output The output instance.
 * @param array $requirements A numerically indexed array of required arguments
 */
function mvc_check_requirements($parser, $output, $requirements)
{
    $args = $parser->getArgs();
    foreach ($requirements as $requirement) {
        if (! array_key_exists($requirement, $args)) {
            throw new PhpCli\Exception('Missing required argument: --' . $requirement);
        }
    }
}

/**
 * Dispatches the request to the appropriate handling function.
 *
 * @param \PhpCli\Parser $parser The parser instance.
 * @param \PhpCli\Outout $output The output instance.
 * @param string $callback The function to call
 */
function mvc_dispatch_request($parser, $output, $callback)
{
    call_user_func_array($callback, [$parser, $output]);
}

/**
 * Runs the setup
 *
 * @param \PhpCli\Parser $parser Instance of the Cli Parser.
 * @param \PhpCli\Output $output Instance of the Cli Output.
 */
function mvc_setup($parser, $output)
{
    $target = ROOT . '/' . $parser->getArg("target");

    if (file_exists($target)) {
        throw new PhpCli\Exception('Target already exists');
    }
    $folders = [
        'App Controllers'    => $target . '/app/Controller',
        'App Models'         => $target . '/app/Model',
        'App Views'          => $target . '/app/View',
        'App View scripts'   => $target . '/app/View/scripts',
        'Index View scripts' => $target . '/app/View/scripts/index',
        'Error View scripts' => $target . '/app/View/scripts/error',
        'App View layouts'   => $target . '/app/View/layouts',
        'Public Images'      => $target . '/pub/img',
        'Public Stylesheets' => $target . '/pub/css',
        'Public Javascript'  => $target . '/pub/js',
        'Public Fonts'       => $target . '/pub/font',
        'Configuration'      => $target . '/etc',
    ];

    $output->write('Creating folders at the following locations ...')->newline();

    // Iterate through the folders, creating them, giving some feedback.
    foreach ($folders as $description => $location) {
        $maxlen = 20;
        $len    = strlen($description);

        $output->write($description, ['color' => 'red'])
            ->write(str_repeat(' ', $maxlen - $len))
            ->write($location)
            ->newline();

        if (!file_exists($location)) {
            mkdir($location, 0777, true);
        }
    }

    // create default controllers, view layout, and view scripts
    $code = mvc_get_controller_code('index', 'Default Controller.');
    file_put_contents($target . '/app/Controller/IndexController.php', $code);
    $code = mvc_get_controller_code('error', 'Handles Error situations.');
    file_put_contents($target . '/app/Controller/ErrorController.php', $code);
    $code = mvc_get_view_script_code('index', 'Default view, for default action.');
    file_put_contents($target . '/app/View/scripts/index/index.phtml', $code);
    $code = mvc_get_view_script_code('error', 'The standard error view.');
    file_put_contents($target . '/app/View/scripts/error/error.phtml', $code);
    $code = mvc_get_view_layout_code();
    file_put_contents($target . '/app/View/layouts/default.phtml', $code);
}

/**
 * Creates a controller.
 *
 * @param \PhpCli\Parser $parser Instance of the Cli Parser.
 * @param \PhpCli\Output $output Instance of the Cli Output.
 */
function mvc_controller_create($parser, $output)
{
    $name        = strtolower($parser->getArg('name'));
    $description = $parser->getArg('description');
    $target      = ROOT . '/' . $parser->getArg("target");
    $filename    = $target . '/app/Controller/' . ucfirst($name) . 'Controller.php';
    $code        = mvc_get_controller_code($name);

    file_put_contents($filename, $code);
}

/**
 * Creates a model.
 *
 * @param \PhpCli\Parser $parser Instance of the Cli Parser
 * @param \PhpCli\Output $output Instance of the Cli Output
 */
function mvc_model_create($parser, $output)
{
    $name        = strtolower($parser->getArg('name'));
    $description = $parser->getArg('description');
    $target      = ROOT . '/' . $parser->getArg("target");
    $filename    = $target . '/app/Model/' . ucfirst($name) . '.php';
    $code        = mvc_get_model_code($name);

    file_put_contents($filename, $code);
}

/**
 * Creates a model.
 *
 * @param \PhpCli\Parser $parser Instance of the Cli Parser.
 * @param \PhpCli\Output $output Instance of the Cli Output.
 */
function mvc_action_create($parser, $output)
{
    $name        = strtolower($parser->getArg('name'));
    $description = $parser->getArg('description');
    $controller  = strtolower($parser->getArg('controller'));
    $target      = ROOT . '/' . $parser->getArg("target");
    $lines       = file($filename, FILE_IGNORE_NEW_LINES);
    array_pop($lines);

    $code = implode(PHP_EOL, $lines);
    $code .= mvc_get_controller_action_code($name) . PHP_EOL . '}' . PHP_EOL;
    $code = mvc_get_controller_action_code($name);

    file_put_contents($filename, $code);
    mvc_view_create($parser, $output);
}
/**
 * Creates a view.
 *
 * @param \PhpCli\Parser $parser Instance of the Cli Parser.
 * @param \PhpCli\Output $output Instance of the Cli Output.
 */
function mvc_view_create($parser, $output)
{
    $name        = strtolower($parser->getArg('name'));
    $description = $parser->getArg('description');
    $controller  = strtolower($parser->getArg('controller'));
    $target      = ROOT . '/' . $parser->getArg("target");
    $filename    = $target . '/app/View/scripts/' . $controller . '/' . $name . '.phtml';
    $directory   = dirname($filename);
    if (! file_exists($directory)) {
        mkdir($directory);
    }

    $code = mvc_get_view_script_code($name);

    file_put_contents($filename, $code);
}

/**
 * Handles the creation of MVC resources.
 *
 * @param PhpCli\Parser $parser Instance of the Cli Parser.
 * @param PhpCli\Output $output Instance of the Cli Output.
 */
function mvc_resource_create($parser, $output)
{
    $args = $parser->getArgs();
    $args = [
        '--name=index',
        '--target=' . $args['target'],
        '--controller=' . $args['name']
    ];

    $viewParser = new PhpCli\Parser($args, [
        'name'       => 'The name of the resource',
        'target'     => 'The root of the application',
        'controller' => 'The name of the controller',
    ]);

    mvc_model_create($parser, $output);
    mvc_controller_create($parser, $output);
    mvc_view_create($viewParser, $output);
}


/**
 * Gets default code for a controller.
 *
 * @param string $name The name of the controller.
 *
 * @return string The default code for a controller.
 */
function mvc_get_controller_code($name, $description = '')
{
    $code = <<<code
<?php
/**
 * Application !upperNameController Controller
 *
 * @category    PHP
 * @package     MvcLite
 * @subpackage  App
 */

namespace App;

use MvcLite\Controller;

/**
 * Application !upperNameController Controller
 *
 * @category    PHP
 * @package     MvcLite
 * @subpackage  App
 */
class !upperNameController extends Controller
{
    /**
     * Index/index. This is the default action.
     */
    public function indexAction()
    {

    }
}

code;

    return strtr($code, [
        '!name'        => strtolower($name),
        '!upperName'   => ucwords($name),
        '!description' => $description,
    ]);
}

/**
 * Gets some default code for a controller action
 *
 * @param string $name The name of the action.
 * @param string $description The description of what the action does.
 *
 * @return string The resulting code for the action.
 */
function mvc_get_controller_action_code($name, $description = '')
{
    $code = <<<code
    /**
     * !name action
     *
     * !description
     */
    public function !nameAction()
    {

    }
code;

    return strtr($code, [
        '!name'        => $name,
        '!description' => $description,
    ]);
}

/**
 * Gets default code for a model.
 *
 * @param string $name The name of the model.
 * @param string $description The description of what the model does.
 *
 * @return string The default code for a model.
 */
function mvc_get_model_code($name, $description = '')
{
    $code = <<<code
<?php
/**
 * !name Model Code
 *
 * !description
 *
 * @category    MvcLite
 * @package     App
 * @subpackage  Model
 */

namespace App;

use MvcLite\ModelAbstract;

/**
 * !name Model Code
 *
 * !description
 *
 * @category    MvcLite
 * @package     App
 * @subpackage  Model
 */
class !upperName
  extends ModelAbstract
{
    // Code goes here ;)
}

code;

    return strtr($code, [
        '!name'        => strtolower($name),
        '!upperName'   => ucwords($name),
        '!description' => $description,
    ]);
}

/**
 * Gets default code for a view script.
 *
 * @param string $name The name of the view script.
 * @param string $description The description of what the view script does.
 *
 * @return string The code for a view script.
 */
function mvc_get_view_script_code($name, $description = '')
{
    $code = <<<code
<?php
/**
 * !name view script.
 *
 * !description
 */
?>

<h2>!upperName</h2>
!name view script

code;

    return strtr($code, [
        '!name'        => strtolower($name),
        '!upperName'   => ucwords($name),
        '!description' => $description,
    ]);
}

/**
 * Gets default code for a view layout.
 *
 * @return string The code for a sample layout page.
 */
function mvc_get_view_layout_code()
{
    $code = <<<code
<?php
/**
 * Default layout script
 */
?>
<?php
  \$title = isset(\$title) ? \$title : 'MVC Lite App';
  \$content = isset(\$content) ? \$content :  '';
?>
<!doctype html>
<html class="no-js" lang="">
    <head>
        <meta charset="utf-8">
        <meta http-equiv="x-ua-compatible" content="ie=edge">
        <title><?php echo \$title; ?></title>
        <meta name="description" content="">
        <meta name="viewport" content="width=device-width, initial-scale=1">
        <link rel="apple-touch-icon" href="apple-touch-icon.png">
    </head>
    <body>
        <!--[if lt IE 8]>
            <p class="browserupgrade">You are using an <strong>outdated</strong>
            browser. Please <a href="http://browsehappy.com/">upgrade your browser</a>
            to improve your experience.</p>
        <![endif]-->

        <!-- Add your site or application content here -->
        <?php echo \$content; ?>
    </body>
</html>

code;

    return $code;
}