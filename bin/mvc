#!/usr/bin/env php
<?php
/* vim: set expandtab tabstop=4 shiftwidth=4 softtabstop=4: */
// Setup the autoloader.
// define('ROOT', realpath(mvc_dirname(__FILE__) . '/../'));
// define('ROOT', realpath(mvc_dirname(__FILE__) . '/../../'));
define('ROOT', realpath(mvc_dirname(__FILE__) . '/../../../../'));

require ROOT . '/vendor/autoload.php';

mvc_dispatch($argv);

// {{{ Administrative functions.

/**
 * Gets the supported functions, and their required params.
 *
 * @return array An array of function=>details.
 */
function mvc_get_function_map()
{
    // List of supported arguments to functions.
    $map = [
        'help' => [
            'description' => 'This menu',
            'callback'    => 'help',
            'required'    => [],
            'supported'   => [],
        ],
        'setup' => [
            'description' => 'Setup an standard mvc-lite application',
            'callback'    => 'setup',
            'required'    => ['target'],
            'supported'   => [
                'target' => 'Where to create the mvc application',
            ],
        ],
        'controller:create' => [
            'description' => 'Create a controller',
            'callback'    => 'controller_create',
            'required'    => ['target', 'name'],
            'supported'   => [
                'name'        => 'The name of the controller',
                'target'      => 'The root of the application',
                'description' => 'The description of the controller',
            ],
        ],
        'model:create' => [
            'description' => 'Create a model',
            'callback'    => 'model_create',
            'required'    => ['target', 'name'],
            'supported'   => [
                'name'        => 'The name of the model',
                'target'      => 'The root of the application',
                'description' => 'The description of the model',
            ]
        ],
        'action:create' => [
            'description' => 'Create an action (creates a corresponding view script)',
            'callback'    => 'action_create',
            'required'    => ['target', 'name', 'controller'],
            'supported'   => [
                'name'        => 'The name of the action',
                'controller'  => 'The name of the controller',
                'target'      => 'The root of the application',
                'description' => 'The description of the action',
            ]
        ],
        'resource:create' => [
            'description' => 'Create a resource (Controller, model, and default view)',
            'callback'    => 'resource_create',
            'required'    => ['target', 'name'],
            'supported'   => [
                'name'        => 'The name of the resource',
                'target'      => 'The root of the application',
                'description' => 'The description of the resource',
            ]
        ],
    ];

    return $map;
}

/**
 * Standardizes arguments.
 *
 * @param array $args The array to standardize.
 * @param array $defaults The default values.
 *
 * @return array The result.
 */
function mvc_get_standardized_args($args = [], $defaults = [])
{
    $sanitized = array_merge($defaults, $args);
    $sanitized['target'] = isset($sanitized['target']) ? $sanitized['target'] : '';
    $sanitized['target'] = ROOT . '/' . $sanitized['target'];
    return $sanitized;
}

/**
 * Checks to make sure that the arguments given, match required arguments.
 *
 * @param \PhpCli\Parser $parser The parser instance.
 * @param \PhpCli\Outout $output The output instance.
 * @param array $requirements A numerically indexed array of required arguments
 */
function mvc_check_requirements($parser, $output, $requirements)
{
    $args = $parser->getArgs();
    foreach ($requirements as $requirement) {
        if (! array_key_exists($requirement, $args)) {
            throw new PhpCli\Exception('Missing required argument: --' . $requirement);
        }
    }
}

// }}}

// {{{ Dispachable functions.

/**
 * Dispatches the request to the appropriate handling function.
 *
 * @param array $args A raw array of arguments
 */
function mvc_dispatch($args = [])
{
    $map  = mvc_get_function_map();
    $func = isset($args[1]) ? $args[1] : 'help';

    if (array_key_exists($func, $map)) {
        // Try to run the function, but be prepared for bad things.
        try {
            $output = new PhpCli\Output;
            $parser = new PhpCli\Parser($args, $map[$func]['supported']);
            $args = $parser->getArgs();
            $args = mvc_get_standardized_args($args);
            $callback = 'mvc_dispatch_' . $map[$func]['callback'];

            mvc_check_requirements($parser, $output, $map[$func]['required']);
            call_user_func($callback, array_merge($args, [
                'parser' => $parser,
                'output' => $output,
            ]));

        } catch (PhpCli\Exception $exception) {
        // Catch any namespaced exceptions, and send them to the output device.
            $output->newline()
                ->write(' Caught Exception', ['color' => 'red'])
                ->newline()
                ->write(' - ' . $exception->getMessage())
                ->newline()
                ->newline();
        }
    }
}

/**
 * Shows a help menu to the user.
 *
 * @param array $args An array of arguments.
 */
function mvc_dispatch_help($args = [])
{
    $map = mvc_get_function_map();
    $output = $args['output'];
    foreach ($map as $arg => $options) {
        $output->newline()
            ->write($arg, ['color' => 'red', 'bold' => true])
            ->write(' - ')
            ->write($options['description'])
            ->newline();
        if (count($options['required'])) {
            $output->write('    Required arguments: ', ['color' => 'green'])
            ->write('--'. implode('=value, --', $options['required']) . '=value')
            ->newline();
        }
    }

    $output->newline()
        ->write('Example Usage: ', ['bold' => true])
        ->newline()
        ->write('  ./vendor/bin/mvc --resource:create --name=users --target=/path/to/app')
        ->newline()
        ->newline();
}

/**
 * Runs the setup
 *
 * @param array $args An array of arguments.
 */
function mvc_dispatch_setup($args = [])
{
    extract($args);

    if (mvc_file_exists($target)) {
        throw new PhpCli\Exception('Target already exists');
    }

    $folders = [
        'App Controllers'    => $target . '/app/Controller',
        'App Models'         => $target . '/app/Model',
        'App Views'          => $target . '/app/View',
        'App View scripts'   => $target . '/app/View/scripts',
        'Index View scripts' => $target . '/app/View/scripts/index',
        'Error View scripts' => $target . '/app/View/scripts/error',
        'App View layouts'   => $target . '/app/View/layouts',
        'Public Images'      => $target . '/pub/img',
        'Public Stylesheets' => $target . '/pub/css',
        'Public Javascript'  => $target . '/pub/js',
        'Public Fonts'       => $target . '/pub/font',
        'Configuration'      => $target . '/etc',
    ];

    $output->write('Creating folders at the following locations ...')->newline();

    // Iterate through the folders, creating them, giving some feedback.
    foreach ($folders as $description => $location) {
        $maxlen = 20;
        $len    = strlen($description);

        $output->write($description, ['color' => 'red'])
            ->write(str_repeat(' ', $maxlen - $len))
            ->write($location)
            ->newline();

        if (!mvc_file_exists($location)) {
            mvc_mkdir($location, 0777, true);
        }
    }

    // create default controllers, view layout, and view scripts
    mvc_dispatch_controller_create(array_merge($args, [
        'name'   => 'index',
    ]));

    mvc_dispatch_controller_create(array_merge($args, [
        'name'   => 'error',
    ]));

    mvc_dispatch_view_create(array_merge($args, [
        'name'        => 'error',
        'controller'  => 'error',
        'description' => 'The standard error view script',
    ]));

    mvc_dispatch_action_create(array_merge($args, [
        'name'        => 'error',
        'controller'  => 'error',
        'description' => 'error handler',
    ]));

    mvc_dispatch_view_create(array_merge($args, [
        'name'        => 'index',
        'controller'  => 'index',
        'description' => 'The home page',
    ]));

    mvc_file_put_contents($args['target'] . '/app/View/layouts/default.html.php', mvc_get_view_layout_code());
    mvc_file_put_contents($args['target'] . '/etc/app.ini', mvc_get_app_ini_file());
    mvc_file_put_contents($args['target'] . '/pub/index.php', mvc_get_dispatch_script());
    mvc_file_put_contents($args['target'] . '/pub/.htaccess', mvc_get_htaccess_code());
}

/**
 * Creates a controller.
 *
 * @param array $args An array of arguments.
 */
function mvc_dispatch_controller_create($args = [])
{
    $file = mvc_get_controller_path($args);
    $code = mvc_get_controller_code($args);
    mvc_file_put_contents($file, $code);
}

/**
 * Creates a model.
 *
 * @param array $args An array of arguments.
 */
function mvc_dispatch_model_create($args = [])
{
    $file = mvc_get_model_path($args);
    $code = mvc_get_model_code($args);
    mvc_file_put_contents($file, $code);
}

/**
 * Creates a model.
 *
 * @param array $args An array of arguments.
 */
function mvc_dispatch_action_create($args = [])
{
    $filename = mvc_get_controller_path($args);
    $lines = mvc_file($filename, FILE_IGNORE_NEW_LINES);
    array_pop($lines);

    $code = implode(PHP_EOL, $lines);
    $code .= mvc_get_controller_action_code($args) . PHP_EOL . '}' . PHP_EOL;

    mvc_file_put_contents($filename, $code);
    mvc_dispatch_view_create(array_merge($args, [
        'controller' => $args['name'],
    ])) ;
}
/**
 * Creates a view.
 *
 * @param array $args An array of arguments.
 */
function mvc_dispatch_view_create($args = [])
{
    $file = mvc_get_view_script_path($args);
    $code = mvc_get_view_script_code($args);
    mvc_view_sanity_check($args);
    mvc_file_put_contents($file, $code);
}

/**
 * Function to ensure the containing directory for a view exists.
 *
 * @param array $args An array of arguments.
 */
function mvc_view_sanity_check($args = [])
{
    $file = mvc_get_view_script_path($args);
    $dir  = mvc_dirname($file);
    if (! mvc_file_exists($dir)) {
        mvc_mkdir($dir);
    }
}

/**
 * Handles the creation of MVC resources.
 *
 * @param array $args An array of arguments.
 */
function mvc_dispatch_resource_create($args = [])
{
    mvc_dispatch_model_create($args);
    mvc_dispatch_controller_create($args);
    mvc_dispatch_view_create(array_merge($args, [
        'name'       => 'index',
        'controller' => $args['name']
    ]));
}

// }}}

// {{{ Code templates

/**
 * Gets default code for a controller.
 *
 * @param array $args An array of arguments.
 */
function mvc_get_controller_code($args = [])
{
    $defaults = ['name' => 'index', 'description' => ''];
    $params = array_merge($defaults, $args);
    extract($params);
    $code = <<<code
<?php
/**
 * Application !upperNameController Controller
 *
 * @category    PHP
 * @package     MvcLite
 * @subpackage  App
 */

namespace App;

use MvcLite\Controller;

/**
 * Application !upperNameController Controller
 *
 * @category    PHP
 * @package     MvcLite
 * @subpackage  App
 */
class !upperNameController extends Controller
{
    /**
     * Index/index. This is the default action.
     */
    public function indexAction()
    {

    }
}

code;

    return strtr($code, [
        '!name'        => strtolower($name),
        '!upperName'   => ucwords($name),
        '!description' => $description,
    ]);
}

/**
 * Gets some default code for a controller action
 *
 * @param array $params An associative array of parameters.
 *
 * @return string The resulting code for the action.
 */
function mvc_get_controller_action_code($args = [])
{
    $defaults = ['name' => 'index', 'description' => ''];
    $params = array_merge($defaults, $args);
    extract($params);

    $code = <<<code
    /**
     * !name action
     *
     * !description
     */
    public function !nameAction()
    {

    }
code;

    return strtr($code, [
        '!name'        => $name,
        '!description' => $description,
    ]);
}

/**
 * Gets default code for a model.
 *
 * @param array $params An associative array of parameters.
 *
 * @return string The default code for a model.
 */
function mvc_get_model_code($args = [])
{
    $defaults = ['name' => 'index', 'description' => ''];
    $params = array_merge($defaults, $args);
    extract($params);

    $code = <<<code
<?php
/**
 * !name Model Code
 *
 * !description
 *
 * @category    MvcLite
 * @package     App
 * @subpackage  Model
 */

namespace App;

use MvcLite\ModelAbstract;

/**
 * !name Model Code
 *
 * !description
 *
 * @category    MvcLite
 * @package     App
 * @subpackage  Model
 */
class !upperName
  extends ModelAbstract
{
    // Code goes here ;)
}

code;

    return strtr($code, [
        '!name'        => strtolower($name),
        '!upperName'   => ucwords($name),
        '!description' => $description,
    ]);
}

/**
 * Gets default code for a view script.
 *
 * @param array $params An associative array of parameters.
 *
 * @return string The code for a view script.
 */
function mvc_get_view_script_code($args = [])
{
    $defaults = [
        'name'        => 'index',
        'controller'  => 'index',
        'description' => '',
    ];
    $params = array_merge($defaults, $args);
    extract($params);

    $code = <<<code
<?php
/**
 * !controller/!name view script.
 *
 * !description
 */
?>

<div class="container">
    <div class="row">
        <div class="col-md-12">
            <h2>!controller !upperName</h2>
            <p>!name view script for the !controllerController</p>
        </div>
    </div>
</div>

code;

    return strtr($code, [
        '!name'        => strtolower($name),
        '!upperName'   => ucwords($name),
        '!description' => $description,
        '!controller'  => ucwords($controller),
    ]);
}

/**
 * Gets default code for a view layout.
 *
 * @return string The code for a sample layout page.
 */
function mvc_get_view_layout_code()
{
    $code = <<<code
<?php
/**
 * Default layout script
 */
?>
<!doctype html>
<html class="no-js" lang="">
    <head>
        <meta charset="utf-8">
        <meta http-equiv="x-ua-compatible" content="ie=edge">
        <title><?php echo \$this->get('title'); ?></title>
        <meta name="description" content="">
        <meta name="viewport" content="width=device-width, initial-scale=1">
        <link rel="apple-touch-icon" href="apple-touch-icon.png">
         <!-- Bootstrap -->
        <!-- Latest compiled and minified CSS -->
        <link rel="stylesheet"
            href="https://maxcdn.bootstrapcdn.com/bootstrap/3.3.6/css/bootstrap.min.css"
            integrity="sha384-1q8mTJOASx8j1Au+a5WDVnPi2lkFfwwEAa8hDDdjZlpLegxhjVME1fgjWPGmkzs7"
            crossorigin="anonymous" />
        <link rel="stylesheet"
            href="https://maxcdn.bootstrapcdn.com/bootstrap/3.3.6/css/bootstrap-theme.min.css"
            integrity="sha384-fLW2N01lMqjakBkx3l/M9EahuwpSfeNvV63J5ezn3uZzapT0u7EYsXMjQV+0En5r"
            crossorigin="anonymous" />

        <!-- HTML5 shim and Respond.js for IE8 support of HTML5 elements and media queries -->
        <!-- WARNING: Respond.js doesn't work if you view the page via file:// -->
        <!--[if lt IE 9]>
          <script src="https://oss.maxcdn.com/html5shiv/3.7.2/html5shiv.min.js"></script>
          <script src="https://oss.maxcdn.com/respond/1.4.2/respond.min.js"></script>
        <![endif]-->
    </head>
    <body>

        <!--[if lt IE 8]>
            <p class="browserupgrade">You are using an <strong>outdated</strong>
            browser. Please <a href="http://browsehappy.com/">upgrade your browser</a>
            to improve your experience.</p>
        <![endif]-->
        <!-- Add your site or application content here -->
        <?php echo \$this->get('content'); ?>

        <!-- jQuery (necessary for Bootstrap's JavaScript plugins) -->
        <script src="https://ajax.googleapis.com/ajax/libs/jquery/1.11.3/jquery.min.js"></script>
        <script src="https://maxcdn.bootstrapcdn.com/bootstrap/3.3.6/js/bootstrap.min.js"
            integrity="sha384-0mSbJDEHialfmuBBQP6A4Qrprq5OVfW37PRR3j5ELqxss1yVqOtnepnHVP9aJ7xS"
            crossorigin="anonymous"></script>
    </body>
</html>

code;

    return $code;
}

/**
 * Returns the default ini file for the application.
 *
 * @return string The default ini file.
 */
function mvc_get_app_ini_file()
{
    $code = <<<code
database.host = 127.0.0.1
database.name = mvc_app
database.user = mvc_user
database.pass = mvc_pass
code;

    return $code;
}

/**
 * Returns the dispatch script, to use in the application
 *
 * @return string The entry point code.
 */
function mvc_get_dispatch_script()
{
    $code = <<<code
<?php
/**
 * Application bootstrapping file.
 *
 * This file acts as the main entry point to the application
 *
 * @category    PHP
 * @package     MvcLite
 * @subpackage  App
 * @since       File available since release 1.0.0
 * @author      Cory Collier <corycollier@corycollier.com>
 */

// Define the path contants.
define('ROOT', realpath(implode(DIRECTORY_SEPARATOR, [dirname(__FILE__), '..'])));
define('APP_PATH', implode(DIRECTORY_SEPARATOR, [ROOT, 'app']));
define('CONFIG_PATH', implode(DIRECTORY_SEPARATOR, [ROOT, 'etc']));

// Set the include path.
set_include_path(implode(PATH_SEPARATOR, [ROOT, get_include_path()]));

// Setup the autoloader.
\$loader = require implode(DIRECTORY_SEPARATOR, [ROOT, '..', 'vendor', 'autoload.php']);
\$loader->addPsr4('App\\\\', APP_PATH);
\$loader->addPsr4('App\\\\', implode(DIRECTORY_SEPARATOR, [APP_PATH, 'Controller']));

// Dispatch
\$dispatcher = \MvcLite\Dispatcher::getInstance();
\$dispatcher->init(\$loader);
// if this isn't being called from cli, then run it
if ( PHP_SAPI != 'cli' ) \$dispatcher->dispatch();

code;

    return $code;
}

/**
 * Function to get the htaccess code.
 *
 * @return string The apache rewrite code.
 */
function mvc_get_htaccess_code()
{
    $code = <<<code
#
# Apache/PHP/Drupal settings:
#

# Don't show directory listings for URLs which map to a directory.
Options -Indexes

# Follow symbolic links in this directory.
Options +FollowSymLinks

# Handle any 404 errors.
ErrorDocument 404 /index.php

# Set the default handler.
DirectoryIndex index.php

# Override PHP settings
# PHP 5, Apache 1 and 2.
<IfModule mod_php5.c>
  php_flag magic_quotes_gpc                 off
  php_flag magic_quotes_sybase              off
  php_flag register_globals                 off
  php_flag session.auto_start               off
  php_value mbstring.http_input             pass
  php_value mbstring.http_output            pass
  php_flag mbstring.encoding_translation    off
</IfModule>

# Various rewrite rules.
<IfModule mod_rewrite.c>
  RewriteEngine on

  # If your site is running in a VirtualDocumentRoot at http://example.com/,
  # uncomment the following line:
  # RewriteBase /

  # Pass all requests not referring directly to files in the filesystem to
  # index.php.
  RewriteCond %{REQUEST_FILENAME} !-f
  RewriteCond %{REQUEST_FILENAME} !-d
  RewriteCond %{REQUEST_URI} !=/favicon.ico
  RewriteRule ^ index.php?q=%{REQUEST_URI} [L]
</IfModule>

# Add headers to all responses.
<IfModule mod_headers.c>
  # Disable content sniffing, since it's an attack vector.
  Header always set X-Content-Type-Options nosniff
</IfModule>

code;

    return $code;
}

// }}}

// {{{ Filepaths for resources (model, view, controller)

/**
 * Returns the path for a model, with a set of args.
 *
 * @param array $args An array of arguments.
 *
 * @return string The full filepath to the new model file.
 */
function mvc_get_controller_path($args = [])
{
    $path = '!target/app/Controller/!nameController.php';
    return strtr($path, [
        '!target'     => $args['target'],
        '!name'       => ucwords($args['name'])
    ]);
}

/**
 * Returns the path for a model, with a set of args.
 *
 * @param array $args An array of arguments.
 *
 * @return string The full filepath to the new model file.
 */
function mvc_get_view_script_path($args = [])
{
    $path = '!target/app/View/scripts/!controller/!name.html.php';
    return strtr($path, [
        '!target'     => $args['target'],
        '!controller' => $args['controller'],
        '!name'       => $args['name']
    ]);
}

/**
 * Returns the path for a model, with a set of args.
 *
 * @param array $args An array of arguments.
 *
 * @return string The full filepath to the new model file.
 */
function mvc_get_view_layout_path($args = [])
{
    $path = '!target/app/View/layouts/!name.html.php';
    return strtr($path, [
        '!target'     => $args['target'],
        '!name'       => $args['name']
    ]);
}

/**
 * Returns the path for a config, with a set of args.
 *
 * @param array $args An array of arguments.
 *
 * @return string The full filepath to the new model file.
 */
function mvc_get_config_path($args = [])
{
    $path = '!target/etc/!name.ini';
    return strtr($path, [
        '!target'     => $args['target'],
        '!name'       => $args['name']
    ]);
}

/**
 * Returns the path for a model, with a set of args.
 *
 * @param array $args An array of arguments.
 *
 * @return string The full filepath to the new model file.
 */
function mvc_get_model_path($args = [])
{
    $path = '!target/app/Model/!name.php';
    return strtr($path, [
        '!target'     => $args['target'],
        '!name'       => ucwords($args['name'])
    ]);
}

// }}}

// {{{ Wrappers for native PHP file functions.

/**
 * Wrapper function for php native file_put_contents.
 *
 * @see http://php.net/manual/en/function.file-put-contents.php.
 */
function mvc_file_put_contents($file, $contents, $flags = 0)
{
    return file_put_contents($file, $contents, $flags);
}

/**
 * Wrapper function for php native mkdir.
 *
 * @see http://php.net/manual/en/function.file-put-contents.php.
 */
function mvc_mkdir($dir, $mode = 0777, $recursive = false)
{
    return mkdir($dir, $mode, $recursive);
}

/**
 * Wrapper function for php native file_put_contents.
 *
 * @see http://php.net/manual/en/function.file-put-contents.php.
 */
function mvc_file_exists($filename)
{
    return file_exists($filename);
}

/**
 * Wrapper function for php native file_put_contents.
 *
 * @see http://php.net/manual/en/function.file-put-contents.php.
 */
function mvc_dirname($dir)
{
    return dirname($dir);
}

/**
 * Wrapper function for php native file function.
 *
 * @see http://php.net/manual/en/function.file.php.
 */
function mvc_file($filename, $flags = 0)
{
    return file($filename, $flags);
}

// }}}

/*
 * Local variables:
 * tab-width: 4
 * c-basic-offset: 4
 * c-hanging-comment-ender-p: nil
 * End:
 */